---
interface Props {
  tabs: {label: string; code: string}[];
}
import {Code} from 'astro-expressive-code/components';
const {tabs} = Astro.props;
const defaultTabName = tabs[0].label;
---

<div data-defaulttab={defaultTabName}>
  <div class="flex">
    {
      tabs.map(({label}, i) => (
        <label class="select-none cursor-pointer bg-slate-50 px-4 py-1 ring-1 hover:bg-teal-200 [&:has(input:checked)]:bg-teal-200">
          <input type="radio" name="tabs" data-tab-name={label} checked={i === 0} class="hidden" />
          <span class="text-sm font-bold">{label}</span>
        </label>
      ))
    }
  </div>
  {
    tabs.map(({code, label}) => (
      <div data-tab-name={label}>
        <Code code={code} lang="sh" />
      </div>
    ))
  }
</div>

<script>
  import {$pkgManeger} from '@/store';

  $pkgManeger.subscribe((value) => {
    setActiveTab(value);
  });

  // const defaultTabName =
  function setActiveTab(tabName: string) {
    const tabContents = document.querySelectorAll(
      'div[data-tab-name]'
    ) as NodeListOf<HTMLDivElement>;
    tabContents.forEach((tabContent) => {
      tabContent.style.display = 'none';
    });
    const activeTab = document.querySelector(`div[data-tab-name=${tabName}]`) as HTMLDivElement;
    if (activeTab) activeTab.style.display = 'block';
  }

  document.addEventListener('astro:page-load', () => {
    console.log('----------astro:page-load-----',$pkgManeger.get());
    setActiveTab($pkgManeger.get());
    const radios = document.querySelectorAll(
      'input[type="radio"][data-tab-name]'
    ) as NodeListOf<HTMLInputElement>;
    if (radios) {
      radios.forEach((radio) => {
        const tabName = radio.dataset.tabName as string;
        if(tabName === $pkgManeger.get()) radio.checked = true;
        radio.addEventListener('change', () => {
          //@ts-ignore
          $pkgManeger.set(tabName);
        });
      });
    }
  });
</script>

<style>
  div[data-tab-name] {
    animation: fadeIn 0.4s ease-out;
  }
  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateX(50px);
    }
    100% {
      opacity: 1;
    }
  }
</style>
